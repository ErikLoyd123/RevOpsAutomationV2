# =============================================================================
# RevOps Automation Platform - Docker Compose Configuration
# =============================================================================
# Unified orchestration for all platform services with GPU support
# Optimized for NVIDIA RTX 3070 Ti with extensible service architecture
# 
# Usage:
#   Development:     docker-compose up
#   GPU Development: docker-compose --profile gpu up
#   Production:      docker-compose --profile prod up
# =============================================================================

version: '3.8'

# =============================================================================
# Networks Configuration
# =============================================================================
networks:
  revops-network:
    driver: bridge
    name: revops-automation
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes Configuration
# =============================================================================
volumes:
  # PostgreSQL persistent storage
  postgres_data:
    driver: local
    name: revops_postgres_data
  
  # BGE model cache for faster startups
  bge_model_cache:
    driver: local
    name: revops_bge_models
  
  # Shared application logs
  app_logs:
    driver: local
    name: revops_app_logs
  
  # Redis data for message queues
  redis_data:
    driver: local
    name: revops_redis_data

# =============================================================================
# Base Services (Always Available)
# =============================================================================
services:
  # ---------------------------------------------------------------------------
  # PostgreSQL Database with pgvector Extension
  # ---------------------------------------------------------------------------
  postgres:
    image: ankane/pgvector:v0.5.1
    container_name: revops-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${LOCAL_DB_NAME:-revops_core}
      POSTGRES_USER: ${LOCAL_DB_USER:-revops_user}
      POSTGRES_PASSWORD: ${LOCAL_DB_PASSWORD:-RevOps2024Secure!}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
      # Performance tuning for development
      # POSTGRES_SHARED_PRELOAD_LIBRARIES: pg_stat_statements,pgvector
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init:/docker-entrypoint-initdb.d
      - app_logs:/var/log/postgresql
    ports:
      - "${LOCAL_DB_PORT:-5432}:5432"
    networks:
      revops-network:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${LOCAL_DB_USER:-revops_user} -d ${LOCAL_DB_NAME:-revops_core}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    labels:
      - "com.revops.service=database"
      - "com.revops.environment=${ENVIRONMENT:-development}"

  # ---------------------------------------------------------------------------
  # Redis Message Queue and Cache
  # ---------------------------------------------------------------------------
  redis:
    image: redis:7.2-alpine
    container_name: revops-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - app_logs:/var/log/redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      revops-network:
        ipv4_address: 172.20.0.11
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    labels:
      - "com.revops.service=message-queue"
      - "com.revops.environment=${ENVIRONMENT:-development}"

# =============================================================================
# Data Processing Services (Database Infrastructure Phase)
# =============================================================================
  # ---------------------------------------------------------------------------
  # Data Ingestion Service
  # ---------------------------------------------------------------------------
  ingestion-service:
    build:
      context: .
      dockerfile: infrastructure/docker/data-processing/Dockerfile
    container_name: revops-ingestion-service
    restart: unless-stopped
    environment:
      # Local Database Connection
      LOCAL_DB_HOST: postgres
      LOCAL_DB_PORT: 5432
      LOCAL_DB_NAME: ${LOCAL_DB_NAME:-revops_core}
      LOCAL_DB_USER: ${LOCAL_DB_USER:-revops_user}
      LOCAL_DB_PASSWORD: ${LOCAL_DB_PASSWORD:-RevOps2024Secure!}
      
      # Odoo Production Database (Read-Only)
      ODOO_DB_HOST: ${ODOO_DB_HOST}
      ODOO_DB_PORT: ${ODOO_DB_PORT:-5432}
      ODOO_DB_NAME: ${ODOO_DB_NAME}
      ODOO_DB_USER: ${ODOO_DB_USER}
      ODOO_DB_PASSWORD: ${ODOO_DB_PASSWORD}
      ODOO_DB_SSL_MODE: ${ODOO_DB_SSL_MODE:-require}
      
      # APN Production Database (Read-Only)
      APN_DB_HOST: ${APN_DB_HOST}
      APN_DB_PORT: ${APN_DB_PORT:-5432}
      APN_DB_NAME: ${APN_DB_NAME}
      APN_DB_USER: ${APN_DB_USER}
      APN_DB_PASSWORD: ${APN_DB_PASSWORD}
      APN_DB_SSL_MODE: ${APN_DB_SSL_MODE:-require}
      
      # Service Configuration
      SERVICE_PORT: ${INGESTION_SERVICE_PORT:-8001}
      INGESTION_BATCH_SIZE: ${INGESTION_BATCH_SIZE:-1000}
      APP_LOG_LEVEL: ${APP_LOG_LEVEL:-INFO}
    volumes:
      - ./scripts:/app/scripts:ro
      - ./backend/core:/app/core:ro
      - ./data:/app/data
      - app_logs:/app/logs
    ports:
      - "${INGESTION_SERVICE_PORT:-8001}:8001"
    networks:
      revops-network:
        ipv4_address: 172.20.0.12
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    command: ["python", "/app/scripts/04-deployment/02_run_ingestion_service.py"]
    labels:
      - "com.revops.service=ingestion"
      - "com.revops.phase=database-infrastructure"
      - "com.revops.environment=${APP_ENV:-development}"

  # ---------------------------------------------------------------------------
  # Data Transformation Service
  # ---------------------------------------------------------------------------
  transformation-service:
    build:
      context: .
      dockerfile: infrastructure/docker/data-processing/Dockerfile
    container_name: revops-transformation-service
    restart: unless-stopped
    environment:
      # Local Database Connection
      LOCAL_DB_HOST: postgres
      LOCAL_DB_PORT: 5432
      LOCAL_DB_NAME: ${LOCAL_DB_NAME:-revops_core}
      LOCAL_DB_USER: ${LOCAL_DB_USER:-revops_user}
      LOCAL_DB_PASSWORD: ${LOCAL_DB_PASSWORD:-RevOps2024Secure!}
      
      # Service Configuration
      SERVICE_PORT: ${TRANSFORMATION_SERVICE_PORT:-8002}
      TRANSFORMATION_CHUNK_SIZE: ${TRANSFORMATION_CHUNK_SIZE:-5000}
      APP_LOG_LEVEL: ${APP_LOG_LEVEL:-INFO}
    volumes:
      - ./scripts:/app/scripts:ro
      - ./backend/core:/app/core:ro
      - ./data:/app/data
      - app_logs:/app/logs
    ports:
      - "${TRANSFORMATION_SERVICE_PORT:-8002}:8002"
    networks:
      revops-network:
        ipv4_address: 172.20.0.13
    depends_on:
      postgres:
        condition: service_healthy
      ingestion-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8002/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    command: ["python", "/app/scripts/04-deployment/03_run_transformation_service.py"]
    labels:
      - "com.revops.service=transformation"
      - "com.revops.phase=database-infrastructure"
      - "com.revops.environment=${APP_ENV:-development}"

  # ---------------------------------------------------------------------------
  # Data Validation Service
  # ---------------------------------------------------------------------------
  validation-service:
    build:
      context: .
      dockerfile: infrastructure/docker/data-processing/Dockerfile
    container_name: revops-validation-service
    restart: unless-stopped
    environment:
      # Local Database Connection
      LOCAL_DB_HOST: postgres
      LOCAL_DB_PORT: 5432
      LOCAL_DB_NAME: ${LOCAL_DB_NAME:-revops_core}
      LOCAL_DB_USER: ${LOCAL_DB_USER:-revops_user}
      LOCAL_DB_PASSWORD: ${LOCAL_DB_PASSWORD:-RevOps2024Secure!}
      
      # Service Configuration
      SERVICE_PORT: ${VALIDATION_SERVICE_PORT:-8003}
      VALIDATION_PARALLEL_CHECKS: ${VALIDATION_PARALLEL_CHECKS:-10}
      DQ_ENABLE_AUTO_CHECKS: ${DQ_ENABLE_AUTO_CHECKS:-true}
      DQ_ALERT_THRESHOLD: ${DQ_ALERT_THRESHOLD:-0.95}
      APP_LOG_LEVEL: ${APP_LOG_LEVEL:-INFO}
    volumes:
      - ./scripts:/app/scripts:ro
      - ./backend/core:/app/core:ro
      - ./data:/app/data
      - app_logs:/app/logs
    ports:
      - "${VALIDATION_SERVICE_PORT:-8003}:8003"
    networks:
      revops-network:
        ipv4_address: 172.20.0.14
    depends_on:
      postgres:
        condition: service_healthy
      transformation-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8003/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    command: ["python", "/app/scripts/04-deployment/04_run_validation_service.py"]
    labels:
      - "com.revops.service=validation"
      - "com.revops.phase=database-infrastructure"
      - "com.revops.environment=${APP_ENV:-development}"

# =============================================================================
# BGE Embeddings Service (GPU Profile)
# =============================================================================
  # ---------------------------------------------------------------------------
  # BGE-M3 GPU Embeddings Service (Self-Contained Microservice)
  # ---------------------------------------------------------------------------
  bge-service:
    image: python:3.11-slim
    container_name: revops-bge-service
    restart: unless-stopped
    profiles:
      - gpu
      - prod
    runtime: nvidia  # GPU acceleration enabled
    environment:
      # NVIDIA GPU Configuration
      NVIDIA_VISIBLE_DEVICES: "0"
      NVIDIA_DRIVER_CAPABILITIES: compute,utility
      CUDA_VISIBLE_DEVICES: "0"
      
      # BGE Service Configuration
      BGE_MAX_BATCH_SIZE: ${BGE_BATCH_SIZE:-64}
      BGE_MAX_SEQUENCE_LENGTH: ${BGE_MAX_SEQUENCE:-8192}
      
      # Performance Tuning for RTX 3070 Ti
      TORCH_CUDA_ARCH_LIST: "8.6"
      PYTORCH_CUDA_ALLOC_CONF: "max_split_size_mb:128"
      TORCH_CUDNN_V8_API_ENABLED: "1"
      OMP_NUM_THREADS: "4"
      MKL_NUM_THREADS: "4"
      
      # Hugging Face Cache
      TRANSFORMERS_CACHE: /models
      HF_HOME: /models
    volumes:
      - ./models:/models
    ports:
      - "${BGE_PORT:-8007}:8007"
    networks:
      revops-network:
        ipv4_address: 172.20.0.20
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8007/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '4.0'
    command:
      - bash
      - -c
      - |
        pip install --no-cache-dir --extra-index-url https://download.pytorch.org/whl/cu118 torch sentence-transformers flask requests &&
        python3 -c "
        import torch
        from flask import Flask, request, jsonify
        from sentence_transformers import SentenceTransformer
        
        app = Flask(__name__)
        model = SentenceTransformer('BAAI/bge-m3')
        print(f'BGE-M3 loaded. CUDA: {torch.cuda.is_available()}')
        
        @app.route('/health', methods=['GET'])
        def health():
            return jsonify({
                'status': 'healthy',
                'cuda': torch.cuda.is_available(),
                'model': 'BAAI/bge-m3',
                'device': str(model.device)
            })
        
        @app.route('/embed', methods=['POST'])
        def embed():
            if not request.json or 'texts' not in request.json:
                return jsonify({'error': 'texts required'}), 400
            
            texts = request.json['texts']
            embeddings = model.encode(texts, normalize_embeddings=True).tolist()
            
            return jsonify({
                'embeddings': embeddings,
                'dimension': len(embeddings[0]) if embeddings else 1024,
                'count': len(embeddings)
            })
        
        app.run(host='0.0.0.0', port=8007)
        "
    labels:
      - "com.revops.service=embeddings"
      - "com.revops.gpu=required"
      - "com.revops.gpu.model=RTX_3070_Ti"
      - "com.revops.environment=${ENVIRONMENT:-development}"

# =============================================================================
# Additional Services (Future Extension Points)
# =============================================================================
  # ---------------------------------------------------------------------------
  # Billing Normalization Service (Placeholder)
  # ---------------------------------------------------------------------------
  billing-service:
    image: python:3.10-slim
    container_name: revops-billing-service
    restart: unless-stopped
    profiles:
      - full
      - prod
    environment:
      DATABASE_URL: postgresql://${LOCAL_DB_USER:-revops_user}:${LOCAL_DB_PASSWORD:-RevOps2024Secure!}@postgres:5432/${LOCAL_DB_NAME:-revops_core}
      REDIS_URL: redis://redis:6379/1
      SERVICE_PORT: 8010
      SERVICE_NAME: billing-normalization
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENVIRONMENT: ${ENVIRONMENT:-development}
    volumes:
      - ./backend/services/10-billing:/app/src
      - app_logs:/app/logs
    ports:
      - "${BILLING_PORT:-8010}:8010"
    networks:
      revops-network:
        ipv4_address: 172.20.0.30
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["python", "-c", "import time; time.sleep(999999)"]  # Placeholder
    labels:
      - "com.revops.service=billing"
      - "com.revops.environment=${ENVIRONMENT:-development}"

  # ---------------------------------------------------------------------------
  # Enhanced Opportunity Matching Service with RRF Fusion
  # ---------------------------------------------------------------------------
  matching-service:
    build:
      context: ./backend/services/08-matching
      dockerfile: Dockerfile
    container_name: revops-matching-service
    restart: unless-stopped
    profiles:
      - full
      - prod
    environment:
      DATABASE_URL: postgresql://${LOCAL_DB_USER:-revops_user}:${LOCAL_DB_PASSWORD:-RevOps2024Secure!}@postgres:5432/${LOCAL_DB_NAME:-revops_core}
      REDIS_URL: redis://redis:6379/2
      BGE_SERVICE_URL: http://bge-service:8007
      SERVICE_PORT: 8008
      SERVICE_NAME: enhanced-opportunity-matching
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      
      # RRF Configuration
      RRF_K_VALUE: ${RRF_K_VALUE:-60.0}
      RRF_SEMANTIC_WEIGHT: ${RRF_SEMANTIC_WEIGHT:-0.35}
      RRF_FUZZY_WEIGHT: ${RRF_FUZZY_WEIGHT:-0.25}
      RRF_DOMAIN_WEIGHT: ${RRF_DOMAIN_WEIGHT:-0.25}
      RRF_CONTEXT_WEIGHT: ${RRF_CONTEXT_WEIGHT:-0.15}
    volumes:
      - ./backend/services/08-matching:/app/src
      - app_logs:/app/logs
    ports:
      - "${MATCHING_PORT:-8008}:8008"
    networks:
      revops-network:
        ipv4_address: 172.20.0.31
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      bge-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "com.revops.service=matching"
      - "com.revops.environment=${ENVIRONMENT:-development}"

  # ---------------------------------------------------------------------------
  # POD Rules Engine Service (Placeholder)
  # ---------------------------------------------------------------------------
  rules-service:
    image: python:3.10-slim
    container_name: revops-rules-service
    restart: unless-stopped
    profiles:
      - full
      - prod
    environment:
      DATABASE_URL: postgresql://${LOCAL_DB_USER:-revops_user}:${LOCAL_DB_PASSWORD:-RevOps2024Secure!}@postgres:5432/${LOCAL_DB_NAME:-revops_core}
      REDIS_URL: redis://redis:6379/3
      BILLING_SERVICE_URL: http://billing-service:8010
      SERVICE_PORT: 8009
      SERVICE_NAME: pod-rules-engine
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENVIRONMENT: ${ENVIRONMENT:-development}
    volumes:
      - ./backend/services/09-rules:/app/src
      - app_logs:/app/logs
    ports:
      - "${RULES_PORT:-8009}:8009"
    networks:
      revops-network:
        ipv4_address: 172.20.0.32
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      billing-service:
        condition: service_started
    command: ["python", "-c", "import time; time.sleep(999999)"]  # Placeholder
    labels:
      - "com.revops.service=rules"
      - "com.revops.environment=${ENVIRONMENT:-development}"

  # ---------------------------------------------------------------------------
  # API Gateway Service - Production Ready
  # ---------------------------------------------------------------------------
  api-gateway:
    build:
      context: ./backend/services/06-api
      dockerfile: Dockerfile
    container_name: revops-api-gateway
    restart: unless-stopped
    profiles:
      - full
      - prod
    environment:
      # Database Configuration
      LOCAL_DB_HOST: postgres
      LOCAL_DB_PORT: 5432
      LOCAL_DB_NAME: ${LOCAL_DB_NAME:-revops_core}
      LOCAL_DB_USER: ${LOCAL_DB_USER:-revops_user}
      LOCAL_DB_PASSWORD: ${LOCAL_DB_PASSWORD:-RevOps2024Secure!}
      
      # Authentication & Security
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-jwt-secret-key-change-in-production}
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      JWT_EXPIRY_HOURS: ${JWT_EXPIRY_HOURS:-24}
      
      # Service Discovery URLs  
      MATCHING_SERVICE_URL: http://revops-matching-service:8008
      BGE_SERVICE_URL: http://revops-bge-service:8007
      INGESTION_SERVICE_URL: http://revops-ingestion-service:8001
      TRANSFORMATION_SERVICE_URL: http://revops-transformation-service:8002
      RULES_SERVICE_URL: http://revops-rules-service:8009
      
      # CORS and API Configuration
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:8080}
      
      # Rate Limiting
      ENABLE_RATE_LIMITING: ${ENABLE_RATE_LIMITING:-true}
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-100}
      RATE_LIMIT_WINDOW_MINUTES: ${RATE_LIMIT_WINDOW_MINUTES:-1}
      
      # Service Configuration
      HOST: 0.0.0.0
      PORT: 8000
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-false}
    volumes:
      - ./backend/core:/app/backend/core:ro
      - app_logs:/app/logs
    ports:
      - "${API_GATEWAY_PORT:-8000}:8000"
    networks:
      revops-network:
        ipv4_address: 172.20.0.40
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.revops.service=api-gateway"
      - "com.revops.tier=production"
      - "com.revops.environment=${ENVIRONMENT:-development}"

# =============================================================================
# Development and Monitoring Tools
# =============================================================================
  # ---------------------------------------------------------------------------
  # PgAdmin (Development Profile Only)
  # ---------------------------------------------------------------------------
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: revops-pgadmin
    restart: unless-stopped
    profiles:
      - dev
      - monitoring
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@revops.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    volumes:
      - ./infrastructure/postgres/pgadmin:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      revops-network:
        ipv4_address: 172.20.0.50
    depends_on:
      postgres:
        condition: service_healthy
    labels:
      - "com.revops.service=monitoring"
      - "com.revops.tool=pgadmin"

  # ---------------------------------------------------------------------------
  # Redis Commander (Development Profile Only)
  # ---------------------------------------------------------------------------
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: revops-redis-commander
    restart: unless-stopped
    profiles:
      - dev
      - monitoring
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    networks:
      revops-network:
        ipv4_address: 172.20.0.51
    depends_on:
      redis:
        condition: service_healthy
    labels:
      - "com.revops.service=monitoring"
      - "com.revops.tool=redis-commander"

# =============================================================================
# Docker Compose Overrides and Environment Configuration
# =============================================================================
# To use environment-specific configurations:
#
# Development (CPU-only):
#   docker-compose --profile dev up
#
# Development with GPU:
#   docker-compose --profile gpu up
#
# Full stack with monitoring:
#   docker-compose --profile dev --profile monitoring --profile full up
#
# Production:
#   docker-compose --profile prod up
#
# Environment variables can be set in:
#   - .env file (for local development)
#   - .env.local file (for local overrides)
#   - Environment-specific files (.env.development, .env.production)
# =============================================================================